package render

import "fmt"

templ WithLabel(label string, editor templ.Component) {
	<div class="px-4 py-4 sm:grid sm:grid-cols-4 sm:gap-2 sm:px-0">
		<dt class="leading-6">
			<p class="text-sm text-gray-900 font-semibold">{ label }</p>
		</dt>
		<dd class="mt-1 text-sm leading-6 text-gray-700 sm:col-span-3 sm:mt-0">
			@editor
			<p id={ label + "-error" }></p>
		</dd>
	</div>
}

templ String(props Props) {
	switch props.Mode {
		case ModeView :
			<p id={ props.Name }>{ props.Value.String() }</p>
		case ModeEdit, ModeCreate:
			<input
				type="text"
				id={ props.Name }
				name={ props.Name }
				class="block w-full rounded-md border-0 py-1.5 px-2 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
				placeholder={ props.Desc }
				value={ props.Value.String() }
			/>
	}
}

templ Number(props Props) {
	switch props.Mode {
		case ModeView :
			<p id={ props.Name }>{ fmt.Sprintf("%v", props.Value.Interface()) }</p>
		case ModeEdit, ModeCreate:
			<input
				type="number"
				id={ props.Name }
				name={ props.Name }
				class="block w-full rounded-md border-0 py-1.5 px-2 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
				placeholder={ props.Desc }
				value={ fmt.Sprintf("%v", props.Value.Interface()) }
			/>
	}
}

templ Bool(props Props) {
	switch props.Mode {
		case ModeView :
			<div class="relative flex items-start">
				<div class="flex h-6 items-center">
					if props.Value.Bool() {
						<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
							<path stroke-linecap="round" stroke-linejoin="round" d="m4.5 12.75 6 6 9-13.5"></path>
						</svg>
					} else {
						<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
							<path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12"></path>
						</svg>
					}
				</div>
			</div>
		case ModeEdit, ModeCreate:
			<div class="relative flex items-start">
				<div class="flex h-6 items-center">
					<input
						id={ props.Name }
						name={ props.Name }
						aria-describedby="offers-description"
						type="checkbox"
						class="h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-600"
						value={ fmt.Sprintf("%v", props.Value.Bool()) }
						if props.Value.Bool() {
							checked
						}
					/>
				</div>
				<div class="ml-3 text-sm leading-6">
					<label for={ props.Name } class="text-gray-500">{ props.Desc }</label>
				</div>
			</div>
	}
}

templ Select(props Props, lookup Lookup) {
	<div
		class="relative mt-2 combobox"
		hx-on:load="
      var combobox = this;
      var hiddenInput = combobox.querySelector('.combobox-value');
      var options = combobox.querySelectorAll('.combobox-option');
      var initialValue = hiddenInput.value;
      var comboboxInput = combobox.querySelector('.combobox-input');

      options.forEach(function(option) {
        if (option.getAttribute('data-value') === initialValue) {
          option.classList.add('selected');
          var selectedText = option.querySelector('.block.truncate').textContent.trim();
          comboboxInput.value = selectedText;
        } else {
          option.classList.remove('selected');
        }
      });
    "
	>
		<!-- Hidden Checkbox to control dropdown visibility -->
		<input type="checkbox" id={ props.Name + "_toggle" } class="combobox-toggle hidden"/>
		<!-- Hidden Input to store the selected key -->
		<input
			type="hidden"
			name={ props.Name }
			value={ lookup.Value() }
			class="combobox-value"
		/>
		<!-- Combobox Input Field -->
		<input
			id={ props.Name + "_input" }
			type="text"
			class="w-full rounded-md border-0 bg-white py-1.5 pl-3 pr-12 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6 combobox-input"
			role="combobox"
			aria-controls={ props.Name }
			aria-expanded="false"
			autocomplete="off"
			hx-on:input="
        var filter = this.value.toLowerCase();
        var combobox = this.closest('.combobox');
        var options = combobox.querySelectorAll('.combobox-option');
        var anyVisible = false;
        options.forEach(function(option) {
          var text = option.querySelector('.block.truncate').textContent.toLowerCase();
          if (text.includes(filter)) {
            option.style.display = '';
            anyVisible = true;
          } else {
            option.style.display = 'none';
          }
        });
        var comboboxToggle = combobox.querySelector('.combobox-toggle');
        comboboxToggle.checked = anyVisible;
      "
		/>
		<!-- Dropdown Button -->
		<label for={ props.Name + "_toggle" } class="absolute inset-y-0 right-0 flex items-center rounded-r-md px-2 cursor-pointer combobox-button">
			<svg class="h-5 w-5 text-gray-400" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
				<!-- SVG Path -->
			</svg>
		</label>
		<!-- Options List -->
		<ul class="absolute z-10 mt-1 max-h-60 w-full overflow-auto rounded-md bg-white py-1 text-base shadow-lg sm:text-sm combobox-options" id={ props.Name } role="listbox">
			<!-- Loop through choices -->
			for key, label := range lookup.Choices(props.Parent, props.Store) {
				<li
					class="relative cursor-default select-none py-2 pl-3 pr-9 text-gray-900 combobox-option"
					data-value={ key }
					id={ props.Name + "_" + key }
					role="option"
					tabindex="-1"
					hx-on:click="
            var combobox = this.closest('.combobox');
            var comboboxInput = combobox.querySelector('.combobox-input');
            var hiddenInput = combobox.querySelector('.combobox-value');
            var options = combobox.querySelectorAll('.combobox-option');

            var selectedText = this.querySelector('.block.truncate').textContent.trim();
            comboboxInput.value = selectedText;
            hiddenInput.value = this.getAttribute('data-value');

            // Remove 'selected' class from all options
            options.forEach(function(opt) {
              opt.classList.remove('selected');
            });

            // Add 'selected' class to the clicked option
            this.classList.add('selected');

            // Close the dropdown
            var comboboxToggle = combobox.querySelector('.combobox-toggle');
            comboboxToggle.checked = false;
          "
				>
					<!-- Label -->
					<span class="block truncate">{ label }</span>
					<!-- Checkmark Icon (hidden by default) -->
					<span class="checkmark absolute inset-y-0 right-0 flex items-center pr-4 text-indigo-600">
						<svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
							<!-- SVG Path -->
						</svg>
					</span>
				</li>
			}
		</ul>
	</div>
}
