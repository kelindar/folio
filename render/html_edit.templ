package render

import "fmt"

templ String(props *Props) {
	switch props.Mode {
		case ModeView :
			<p id={ props.Name }>{ props.Value.String() }</p>
		case ModeEdit, ModeCreate:
			<input
				type="text"
				id={ props.Name }
				name={ props.Name }
				class="uk-input"
				placeholder={ props.Desc }
				value={ props.Value.String() }
			/>
	}
}

templ Number(props *Props) {
	switch props.Mode {
		case ModeView :
			<p id={ props.Name }>{ fmt.Sprintf("%v", props.Value.Interface()) }</p>
		case ModeEdit, ModeCreate:
			<input
				type="number"
				id={ props.Name }
				name={ props.Name }
				class="uk-input"
				placeholder={ props.Desc }
				value={ fmt.Sprintf("%v", props.Value.Interface()) }
			/>
	}
}

templ Bool(props *Props) {
	switch props.Mode {
		case ModeView :
			<div class="relative flex items-start">
				<div class="flex h-6 items-center">
					if props.Value.Bool() {
						<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
							<path stroke-linecap="round" stroke-linejoin="round" d="m4.5 12.75 6 6 9-13.5"></path>
						</svg>
					} else {
						<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
							<path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12"></path>
						</svg>
					}
				</div>
			</div>
		case ModeEdit, ModeCreate:
			<div class="relative flex items-start">
				<div class="flex h-6 items-center">
					<input
						id={ props.Name }
						name={ props.Name }
						aria-describedby="offers-description"
						type="checkbox"
						class="uk-checkbox mt-1"
						value={ fmt.Sprintf("%v", props.Value.Bool()) }
						if props.Value.Bool() {
							checked
						}
					/>
				</div>
				<div class="space-y-1 ml-2 mt-1">
					<label class="uk-form-label text-gray-500" for={ props.Name }>
						{ props.Desc }
					</label>
				</div>
			</div>
	}
}

templ Select(props *Props, lookup Lookup) {
	switch props.Mode {
		case ModeView :
			<p id={ props.Name }>{ currentValue(lookup) }</p>
		case ModeEdit, ModeCreate:
			<uk-select name={ props.Name } id={ props.Name } searchable?={ lookup.Len() > 10 || lookup.Len() < 0 } uk-cloak>
				for key, label := range lookup.Choices() {
					if currentKey(lookup) == key {
						<option value={ key } selected>{ label }</option>
					} else {
						<option value={ key }>{ label }</option>
					}
				}
			</uk-select>
	}
}
