package render

import (
	"fmt"
	"github.com/kelindar/folio/convert"
)

templ String(props *Props) {
	switch props.Mode {
		case ModeView :
			<p id={ props.Name }>{ props.Value.String() }</p>
		case ModeEdit, ModeCreate:
			<input
				type="text"
				id={ props.Name }
				name={ props.Name }
				class="uk-input"
				placeholder={ props.Desc }
				value={ props.Value.String() }
			/>
	}
}

templ Number(props *Props) {
	switch props.Mode {
		case ModeView :
			<p id={ props.Name }>{ fmt.Sprintf("%v", props.Value.Interface()) }</p>
		case ModeEdit, ModeCreate:
			<input
				type="number"
				id={ props.Name }
				name={ props.Name }
				class="uk-input"
				placeholder={ props.Desc }
				value={ fmt.Sprintf("%v", props.Value.Interface()) }
			/>
	}
}

templ Bool(props *Props) {
	switch props.Mode {
		case ModeView :
			<div class="relative flex items-start">
				<div class="flex h-6 items-center">
					if props.Value.Bool() {
						<uk-icon icon="check"></uk-icon>
					} else {
						<uk-icon icon="x"></uk-icon>
					}
				</div>
			</div>
		case ModeEdit, ModeCreate:
			<div class="relative flex items-start">
				<div class="flex h-5 items-center">
					<input
						id={ props.Name }
						name={ props.Name }
						aria-describedby="offers-description"
						type="checkbox"
						class="uk-checkbox mt-1"
						value={ fmt.Sprintf("%v", props.Value.Bool()) }
						if props.Value.Bool() {
							checked
						}
					/>
				</div>
				<div class="ml-2">
					<label class="text-sm text-gray-500" for={ props.Name }>
						{ props.Desc }
					</label>
				</div>
			</div>
	}
}

templ Select(props *Props, lookup Lookup) {
	switch props.Mode {
		case ModeView :
			<p id={ props.Name }>{ currentValue(lookup) }</p>
		case ModeEdit, ModeCreate:
			<uk-select name={ props.Name } id={ props.Name } searchable?={ lookup.Len() > 10 || lookup.Len() < 0 } uk-cloak>
				for key, label := range lookup.Choices() {
					if currentKey(lookup) == key {
						<option value={ key } selected>{ label }</option>
					} else {
						<option value={ key }>{ label }</option>
					}
				}
			</uk-select>
	}
}

templ Range(props *Props, min, max, step float64) {
	switch props.Mode {
		case ModeView :
			<p id={ props.Name }>{ fmt.Sprintf("%v", props.Value.Interface()) }</p>
		case ModeEdit, ModeCreate:
			<input
				type="range"
				id={ props.Name }
				name={ props.Name }
				class="uk-range"
				placeholder={ props.Desc }
				value={ fmt.Sprintf("%v", props.Value.Interface()) }
				min={ fmt.Sprintf("%v", min) }
				max={ fmt.Sprintf("%v", max) }
				step={ fmt.Sprintf("%v", step) }
			/>
	}
}

templ Struct(props *Props, children []templ.Component) {
	@hxDivider(props.Name)
	for _, child := range children {
		@child
	}
}

templ StructPtr(props *Props) {
	switch props.Mode {
		case ModeEdit, ModeCreate :
			<div class="divider">
				<button
					id={ "add-" + props.Name }
					class="uk-button uk-button-ghost text-xs"
					uk-tooltip={ "pos: top; title: Add " + convert.Label(props.Name) }
					uk-toggle={ "target: #add-" + props.Name }
					hx-get={ fmt.Sprintf("/make/%s?ns=%s&path=%s", props.Kind, props.Parent.URN().Namespace, props.Name) }
					hx-target={ "#" + props.Name + "-placeholder" }
					hx-swap="outerHTML"
				>
					<uk-icon icon="file-plus"></uk-icon>
				</button>
				<div class="ml-10" id={ "add-" + props.Name } hidden></div>
				<span class="mr-10">{ convert.Label(props.Name) }</span>
			</div>
			<div id={ props.Name + "-placeholder" }>
				<span class="text-gray-400 text-xs block text-center">none</span>
			</div>
	}
}

templ Slice(props *Props) {
	<div class="divider">
		switch props.Mode {
			case ModeEdit, ModeCreate :
				<button
					type="button"
					class="uk-button uk-button-ghost text-xs"
					uk-tooltip="title: Add new item; pos: top"
					hx-get={ fmt.Sprintf("/make/%s?ns=%s&path=%s", props.Kind, props.Parent.URN().Namespace, props.Name) }
					hx-target={ "#" + props.Name }
					hx-swap="beforeend"
				>
					<uk-icon icon="list-plus"></uk-icon>
				</button>
			default:
				<div class="ml-10"></div>
		}
		<span>{ convert.Label(props.Name) }</span>
		<button
			type="button"
			class="uk-button uk-button-ghost text-xs"
			uk-tooltip="title: Collapse/Expand; pos: top"
			uk-toggle={ "animation: uk-animation-fade; target: .toggle-" + props.Name }
		>
			<uk-icon icon="fold-vertical" class={ "toggle-" + props.Name }></uk-icon>
			<uk-icon icon="unfold-vertical" class={ "toggle-" + props.Name } hidden></uk-icon>
		</button>
	</div>
	<ul
		id={ props.Name }
		uk-sortable="handle: .uk-sortable-handle"
		class={ "uk-list uk-list-divider list-ul  toggle-" + props.Name }
	></ul>
}
