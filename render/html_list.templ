package render

import (
	"fmt"
	"github.com/kelindar/folio"
	"github.com/kelindar/folio/convert"
	"iter"
	"math"
	"strconv"
)

templ hxList(rx *Context, content templ.Component) {
	<div class="mx-auto max-w-screen-xl px-4 lg:px-12">
		<div class="bg-white dark:bg-gray-800 relative shadow-md sm:rounded-lg overflow-hidden pb-6">
			<div class="flex flex-col md:flex-row items-center justify-between space-y-3 md:space-y-0 p-4">
				<!-- Grouped Namespace and Search Components -->
				<div class="flex flex-col md:flex-row items-center space-y-3 md:space-y-0 md:space-x-4 w-full md:w-auto flex-1">
					<div class="w-full md:w-auto">
						@hxSearchBar(rx)
					</div>
				</div>
				<!-- Create Button Aligned to the Right -->
				<div class="w-full md:w-auto flex flex-col md:flex-row space-y-2 md:space-y-0 items-stretch md:items-center justify-end md:space-x-3 flex-shrink-0">
					@hxCreateButton(rx)
				</div>
			</div>
			<!-- Content Section -->
			<div class="overflow-x-auto">
				<h2 class="text-3xl font-extrabold leading-none tracking-tight text-gray-900 dark:text-white p-4">
					<span class="underline underline-offset-3 decoration-6 decoration-blue-400">Manage { rx.Type.Plural }</span>
				</h2>
				@content
			</div>
		</div>
	</div>
}

templ hxSearchBar(rx *Context) {
	<form
		hx-post={ pageOf(rx.Kind, rx.Query, 0, 20) }
		hx-target="#list-content"
		hx-swap="outerHTML"
		hx-ext="obj-enc"
		class="uk-search uk-search-default"
	>
		<label for="simple-search" class="sr-only">Search</label>
		<div class="relative w-full border rounded-md">
			<span uk-search-icon></span>
			<input
				id="search_match"
				name="search_match"
				class="uk-search-input"
				type="search"
				placeholder="Search ..."
				aria-label="Search"
			/>
			<input type="hidden" name="search_kind" id="search_kind" value={ rx.Kind.String() }/>
		</div>
	</form>
}

templ hxListContent(rx *Context, elements iter.Seq[folio.Object], page, size, count int) {
	<ul id="list-content" role="list" class="divide-y divide-gray-100">
		for v := range elements {
			<li id={ v.URN().ID }>
				@hxListElementRow(v)
			</li>
		}
		if count > size {
			@hxPagination(rx, page, size, count, int(math.Floor(float64(count)/float64(size))))
		}
	</ul>
}

templ hxListElementUpdate(rx *Context, v folio.Object) {
	<li id={ v.URN().ID } hx-swap-oob="true">
		@hxListElementRow(v)
	</li>
	@hxFormContent(rx, v)
}

templ hxListElementDelete(urn folio.URN) {
	<li id={ urn.ID } hx-swap-oob="delete"></li>
	@hxNotification("Successfully Deleted",
		fmt.Sprintf("The object with ID %s has been successfully deleted.", urn),
	)
}

templ hxListElementCreate(rx *Context, v folio.Object) {
	<ul id="list-content" hx-swap-oob="beforeend" role="list" class="divide-y divide-gray-100">
		<li id={ v.URN().ID }>
			@hxListElementRow(v)
		</li>
	</ul>
	@hxFormContent(rx, v)
}

templ hxListElementRow(v folio.Object) {
	<div
		class="flex justify-between gap-x-2 py-2 px-4 bg-white hover:bg-slate-100 hover:bg-opacity-50 hover:text-white transition duration-300"
		uk-toggle="target: #drawer-toggle"
		hx-target="#drawer"
		hx-get={ "/view/" + v.URN().String() }
	>
		<div class="flex min-w-0 gap-x-4">
			if StringOf(v, "Icon") != "" {
				<img class="h-12 w-12 flex-none rounded-full bg-gray-50" src={ StringOf(v, "Icon") } alt=""/>
			}
			<div class="min-w-0 flex-auto ">
				<p class="text-sm font-semibold leading-6 text-gray-900 whitespace-nowrap truncate">
					{ TitleOf(v) }
					for _, tag := range ListOf(v, "Badges") {
						<span class="bg-slate-100 text-slate-800 text-xxs font-medium me-1 px-2.5 py-0.5 rounded dark:bg-slate-700 dark:text-slate-300">
							{ tag }
						</span>
					}
				</p>
				<p class="mt-1 truncate text-xs leading-5 text-gray-500">
					<span class="bg-slate-100 text-slate-800 text-xxs font-medium me-1 px-2.5 py-0.5 rounded dark:bg-slate-700 dark:text-slate-300">
						{ v.URN().Namespace }
					</span>
					{ StringOf(v, "Subtitle") }
				</p>
			</div>
		</div>
		<div class="hidden shrink-0 sm:flex sm:flex-col sm:items-end gap-y-0.5">
			@hxState(StringOf(v, "Status"))
			<span class="mt-1 truncate text-xs leading-5 text-gray-500 px-2">
				@timedAt(v.Updated())
			</span>
		</div>
	</div>
}

templ hxState(value string) {
	<span class={ "bg-" + convert.Color(value) + "-100 text-" + convert.Color(value) + "-800 text-sm font-medium me-2 px-2 py-0.5 rounded" }>{ value }</span>
}

templ hxCreateButton(rx *Context) {
	if len(rx.Query.Namespace) > 1 {
		<button
			class="uk-button uk-button-primary"
			uk-toggle="target: #drawer-toggle"
			hx-target="#drawer"
			hx-get={ fmt.Sprintf("/make/%s/%s", rx.Kind, rx.Query.Namespace) }
		>
			<uk-icon icon="circle-plus"></uk-icon>&nbsp; Create { rx.Type.Title }
		</button>
	}
}

const pageGap = 2

templ hxPagination(rx *Context, page, size, count, last int) {
	<nav aria-label="Pagination">
		<ul class="uk-pagination justify-center pt-6" uk-margin>
			if page > 0 {
				<li><a hx-get={ pageOf(rx.Kind, rx.Query, page-1, size) } hx-target="#list-content"><span uk-pagination-previous></span></a></li>
			} else {
				<li class="uk-disabled"><span uk-pagination-previous></span></li>
			}
			if max(page-pageGap, 0) > 0 {
				<li><a hx-get={ pageOf(rx.Kind, rx.Query, 0, size) } hx-target="#list-content">1</a> </li>
			}
			if max(page-pageGap, 0) > 1 {
				<li class="uk-disabled"><span>…</span></li>
			}
			for i := max(page-pageGap, 0); i <= min(page+pageGap, last); i++ {
				if i == page {
					<li class="uk-active"><span aria-current="page">{ strconv.Itoa(i+1) }</span> </li>
				} else {
					<li><a hx-get={ pageOf(rx.Kind, rx.Query, i, size) } hx-target="#list-content">{ strconv.Itoa(i+1) }</a></li>
				}
			}
			if min(page+pageGap, last) < last-1 {
				<li class="uk-disabled"><span>…</span></li>
			}
			if min(page+pageGap, last) < last {
				<li><a hx-get={ pageOf(rx.Kind, rx.Query, last, size) } hx-target="#list-content">{ strconv.Itoa(last+1) }</a></li>
			}
			if page < last {
				<li><a hx-get={ pageOf(rx.Kind, rx.Query, page+1, size) } hx-target="#list-content"><span uk-pagination-next></span></a></li>
			} else {
				<li class="uk-disabled"><span uk-pagination-next></span> </li>
			}
		</ul>
		<span class="flex justify-center text-xs pt-2 text-slate-400">
			Showing { strconv.Itoa(page*size+1) } to { strconv.Itoa(min((page+1)*size, count)) } of { strconv.Itoa(count) }
		</span>
	</nav>
}
