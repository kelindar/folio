package render

import (
	"fmt"
	"github.com/kelindar/folio"
)

templ hxNavigate(rx *Context, namespaces []folio.Object, content templ.Component) {
	<div id="navbar" hx-swap-oob="true">
		@hxNavigation(rx, namespaces)
	</div>
	@hxList(rx, content)
}

templ hxNavigation(rx *Context, namespaces []folio.Object) {
	<nav id="navbar" class="bg-white border-gray-200 dark:bg-gray-900 mb-8 shadow-sm">
		<div class="max-w-screen-xl flex flex-wrap items-center justify-between mx-auto p-4">
			@hxNamespace(rx, namespaces)
			<button
				data-collapse-toggle="navbar-default"
				type="button"
				class="inline-flex items-center p-2 w-10 h-10 justify-center text-sm text-gray-500 rounded-lg md:hidden hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-600"
				aria-controls="navbar-default"
				aria-expanded="false"
			>
				<span class="sr-only">Open main menu</span>
				<svg class="w-5 h-5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 17 14">
					<path
						stroke="currentColor"
						stroke-linecap="round"
						stroke-linejoin="round"
						stroke-width="2"
						d="M1 1h15M1 7h15M1 13h15"
					></path>
				</svg>
			</button>
			@hxNavbar(rx)
		</div>
	</nav>
}

templ hxNamespace(rx *Context, namespaces []folio.Object) {
	<div class="w-56">
		<form
			id="namespace-select"
			hx-trigger="uk-select:input delay:100ms"
			hx-post={ "/content/" + rx.Kind.String() }
			hx-target="#page-content"
			hx-swap="innerHTML"
			hx-ext="obj-enc"
		>
			<uk-select
				name="search_namespace"
				id="search_namespace"
				searchable?={ len(namespaces) > 5 }
				uk-cloak
			>
				<option value="" selected?={ rx.Namespace == "" }>All Namespaces</option>
				for _, ns := range namespaces {
					<option value={ StringOf(ns, "Name") } selected?={ rx.Namespace == StringOf(ns, "Name") }>{ TitleOf(ns) }</option>
				}
			</uk-select>
		</form>
	</div>
}

templ hxNavbar(rx *Context) {
	<div class="hidden w-full md:block md:w-auto">
		<ul
			class="font-medium flex flex-col p-4 md:p-0 mt-4 border border-gray-100 rounded-lg bg-gray-50 md:flex-row md:space-x-8 rtl:space-x-reverse md:mt-0 md:border-0 md:bg-white dark:bg-gray-800 md:dark:bg-gray-900 dark:border-gray-700"
		>
			for typ := range rx.Registry.Types() {
				@hxLink(rx, typ)
			}
		</ul>
	</div>
}

// hxLink renders a link with an icon
templ hxLink(rx *Context, typ folio.Type) {
	<li class="text-center">
		<a
			class="block w-16 place-content-center py-2 px-3 text-gray-900 rounded hover:bg-gray-100 md:hover:bg-transparent md:border-0 md:hover:text-blue-700 md:p-0 dark:text-white md:dark:hover:text-blue-500 dark:hover:bg-gray-700 dark:hover:text-white md:dark:hover:bg-transparent"
			aria-current="page"
			hx-get={ fmt.Sprintf("/content/%s?ns=%s", typ.Kind, rx.Namespace) }
			hx-target="#page-content"
		>
			if rx.Kind == typ.Kind {
				<uk-icon class="inline-block text-blue-700" icon={ typ.Icon }></uk-icon>
				<div class="text-xxs font-bold text-blue-700">{ typ.Plural }</div>
			} else {
				<uk-icon class="inline-block" icon={ typ.Icon }></uk-icon>
				<div class="text-xxs font-bold">{ typ.Plural }</div>
			}
		</a>
	</li>
}
