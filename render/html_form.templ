package render

import (
	"fmt"
	"time"

	ut "github.com/go-playground/universal-translator"
	"github.com/go-playground/validator/v10"
	"github.com/kelindar/folio"
	"github.com/kelindar/folio/convert"
)

templ hxFormContent(rx *Context, value folio.Object) {
	<form hx-put={ "/obj/" + value.URN().String() } hx-target="#drawer" class="uk-form-horizontal" hx-ext="obj-enc">
		@hxFormHeader(rx, value)
		<div class="grid gap-4 px-6">
			for _, edit := range Object(rx, value) {
				@edit
			}
			if rx.Mode != ModeCreate {
				@hxDivider("Governance")
				@hxFormRow("Created", "createdAt", timedAt(value.Created()), false)
				@hxFormRow("Updated", "updatedAt", timedAt(value.Updated()), false)
			}
		</div>
	</form>
}

templ hxDivider(title string) {
	<div class="divider">{ title }</div>
}

templ hxFormSection(title, subtitle string) {
	<div class="px-4 py-6 sm:px-0">
		<h3 class="text-base font-semibold leading-7 text-gray-900">
			<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-3 inline align-middle mb-1">
				<path stroke-linecap="round" stroke-linejoin="round" d="m5.25 4.5 7.5 7.5-7.5 7.5m6-15 7.5 7.5-7.5 7.5"></path>
			</svg>
			{ title }
		</h3>
		<p class="max-w-2xl text-xs leading-6 text-gray-500">
			{ subtitle }
		</p>
	</div>
}

templ hxFormRow(label, path string, editor templ.Component, required bool) {
	<div>
		<label class="uk-form-label font-semibold text-gray-900">
			{ label }
			if required {
				<p class="text-slate-300 font-thin text-xs">required</p>
			}
		</label>
		<div class="uk-form-controls">
			@editor
		</div>
		<div id={ path + "-error" } class="uk-form-help text-destructive"></div>
	</div>
}

templ hxFormHeader(rx *Context, v folio.Object) {
	<div class="px-4 py-6 mb-6 border-b bg-gray-50 sm:px-6">
		<div class="flex items-start justify-between space-x-3">
			<div class="space-y-1">
				<h2 class="text-lg font-medium text-gray-900" id="slide-over-title">
					{ TitleOf(v) }
				</h2>
				<p class="text-sm text-gray-500">
					{ StringOf(v, "Subtitle") }
				</p>
			</div>
			<div class="mt-5 flex items-center">
				@hxFormActions(rx, v)
			</div>
		</div>
	</div>
}

templ hxFormActions(rx *Context, value folio.Object) {
	<div class="flex-shrink-0 px-4 sm:px-6">
		<div class="space-x-3 flex justify-end">
			switch rx.Mode {
				case ModeView :
					@hxButtonDropdown("drawer-actions", hxFormEditButton(value.URN()), hxFormExtraActions(value.URN()))
				case ModeEdit:
					<button
						class="uk-button uk-button-ghost"
						hx-target="#drawer"
						hx-get={ "/view/" + value.URN().String() }
					>
						Cancel
					</button>
					<button class="uk-button uk-button-primary">
						Save
					</button>
				case ModeCreate:
					<button
						class="uk-button uk-button-ghost"
						uk-toggle="target: #drawer-toggle"
					>
						Cancel
					</button>
					<button class="uk-button uk-button-primary">
						Save
					</button>
			}
		</div>
	</div>
}

templ hxFormEditButton(urn folio.URN) {
	<button
		type="button"
		class="uk-button uk-button-ghost"
		hx-target="#drawer"
		hx-get={ "/edit/" + urn.String() }
	>Edit</button>
}

templ hxFormExtraActions(urn folio.URN) {
	<a
		href="#"
		class="text-gray-700 block px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
		uk-toggle="target: #drawer-toggle"
		hx-target="#notification"
		hx-delete={ "/obj/" + urn.String() }
	>
		Delete { urn.Kind.String() }
	</a>
}

type ButtonDropdownProps struct {
	ID      string
	Primary templ.Component
	Options templ.Component
}

templ hxButtonDropdown(id string, primary templ.Component, options ...templ.Component) {
	<div class="flex-none">
		<div
			class="flex items-center px-0 uk-button border border-slate-200 bg-white text-secondary-foreground"
		>
			@primary
			<div
				data-orientation="vertical"
				role="none"
				class="h-[20px] w-[1px] shrink-0 bg-slate-200 mx-1"
			></div>
			<button
				class="inline-flex h-9 items-center justify-center whitespace-nowrap px-3"
				type="button"
			>
				<span class="size-4">
					<uk-icon icon="chevron-down"></uk-icon>
				</span>
			</button>
			<div
				class="uk-drop uk-dropdown"
				uk-drop="mode: click; pos: bottom-right"
			>
				<ul class="uk-dropdown-nav">
					for _, opt := range options {
						<li>
							@opt
						</li>
					}
				</ul>
			</div>
		</div>
	</div>
}

templ hxValidationErrors(v folio.Object, translator ut.Translator, errors validator.ValidationErrors) {
	for _, err := range errors {
		<p id={ validationPath(err.Namespace()) + "-error" } hx-swap-oob="true" class="mt-2 text-xs text-red-600">
			{ err.Translate(translator) }
		</p>
	}
}

templ hxAlert(title, subtitle string) {
	<div class="rounded-md bg-yellow-50 p-4">
		<div class="flex">
			<div class="flex-shrink-0">
				<svg class="h-5 w-5 text-yellow-400" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
					<path fill-rule="evenodd" d="M8.485 2.495c.673-1.167 2.357-1.167 3.03 0l6.28 10.875c.673 1.167-.17 2.625-1.516 2.625H3.72c-1.347 0-2.189-1.458-1.515-2.625L8.485 2.495zM10 5a.75.75 0 01.75.75v3.5a.75.75 0 01-1.5 0v-3.5A.75.75 0 0110 5zm0 9a1 1 0 100-2 1 1 0 000 2z" clip-rule="evenodd"></path>
				</svg>
			</div>
			<div class="ml-3">
				<h3 class="text-sm font-medium text-yellow-800">{ title }</h3>
				<div class="mt-2 text-sm text-yellow-700">
					<p>{ subtitle }.</p>
				</div>
			</div>
		</div>
	</div>
}

templ hxNotification(title, subtitle string) {
	<div id="notification" hx-swap-oob="true" aria-live="assertive" class="pointer-events-none fixed inset-0 flex items-end px-4 py-6 sm:items-start sm:p-6 z-10">
		<div class="flex w-full flex-col items-center space-y-4 sm:items-end">
			<div class="pointer-events-auto w-full max-w-sm overflow-hidden rounded-lg bg-white shadow-lg ring-1 ring-black ring-opacity-5 notification-animation opacity-0 translate-y-2 sm:translate-x-2">
				<div class="p-4">
					<div class="flex items-start">
						<div class="flex-shrink-0">
							<svg class="h-6 w-6 text-green-400" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true">
								<path stroke-linecap="round" stroke-linejoin="round" d="M9 12.75L11.25 15 15 9.75M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
							</svg>
						</div>
						<div class="ml-3 w-0 flex-1 pt-0.5">
							<p class="text-sm font-medium text-gray-900">{ title }</p>
							<p class="mt-1 text-sm text-gray-500">{ subtitle }</p>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
}

templ timedAt(user string, at time.Time) {
	<p>{ fmt.Sprintf("%v, %v", convert.TitleCase(user), convert.Since(at)) }</p>
}
