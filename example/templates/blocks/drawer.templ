package blocks

import (
	"fmt"
	"time"

	"github.com/kelindar/folio"
	"github.com/kelindar/folio/example/docs"
	"github.com/kelindar/folio/example/render"
)

templ DrawerHeader(rctx *render.Context, v folio.Object) {
	<div class="px-4 py-6 bg-gray-50 sm:px-6">
		<div class="flex items-start justify-between space-x-3">
			<div class="space-y-1">
				<h2 class="text-lg font-medium text-gray-900" id="slide-over-title">
					{ render.StringOf(v, "Title") }
				</h2>
				<p class="text-sm text-gray-500">
					{ render.StringOf(v, "Subtitle") }
				</p>
			</div>
			<div class="mt-5 flex items-center">
				@DrawerActions(rctx, v)
			</div>
		</div>
	</div>
}

templ ListElementEdit(rctx *render.Context, value *docs.Person) {
	<form hx-post={ "/save/" + value.URN().String() } hx-target="#drawer" hx-ext="json-enc">
		@DrawerHeader(rctx, value)
		<div class="grid gap-6 mb-6 px-6 border-t border-gray-200">
			<dl class="divide-y divide-gray-100">
				@DrawerSection("Details", "This section contains the basic details of the object.")
				@TextEdit(TextProps{
					Mode:  rctx.Mode,
					Name:  "name",
					Label: "Full Name",
					Value: value.Name,
				})
				@TextEdit(TextProps{
					Mode:  rctx.Mode,
					Name:  "company",
					Label: "Company",
					Value: value.Company,
				})
				@TextEdit(TextProps{
					Mode:  rctx.Mode,
					Name:  "jobTitle",
					Label: "Job Title",
					Value: value.JobTitle,
				})
				@TextEdit(TextProps{
					Mode:  rctx.Mode,
					Name:  "phone",
					Label: "Phone Number",
					Value: value.Phone,
				})
				@DrawerSection("Governance", "This section contains information about the governance of the object.")
				@TextEdit(TextProps{
					Mode:  render.ModeView,
					Name:  "created",
					Label: "Created",
					Value: fmt.Sprintf("by %v, at %v", value.CreatedBy, time.Unix(0, value.CreatedAt).String()),
				})
				@TextEdit(TextProps{
					Mode:  render.ModeView,
					Name:  "updated",
					Label: "Modified",
					Value: fmt.Sprintf("by %v, at %v", value.UpdatedBy, time.Unix(0, value.UpdatedAt).String()),
				})
			</dl>
		</div>
	</form>
}

templ DrawerActions(rctx *render.Context, value folio.Object) {
	<div class="flex-shrink-0 px-4 sm:px-6">
		<div class="space-x-3 flex justify-end">
			switch rctx.Mode {
				case render.ModeView :
					@ButtonDropdown(ButtonDropdownProps{
						ID:      "drawer-actions",
						Primary: drawerEditButton(value.URN()),
						Options: drawerExtraActions(value.URN()),
					})
				case render.ModeEdit:
					<button
						class="bg-white py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
						hx-target="#drawer"
						hx-get={ "/view/" + value.URN().String() }
					>
						Cancel
					</button>
					<button class="inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
						Save
					</button>
			}
		</div>
	</div>
}

templ drawerEditButton(urn folio.URN) {
	<button
		type="button"
		class="relative inline-flex items-center rounded-l-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-10"
		hx-target="#drawer"
		hx-get={ "/edit/" + urn.String() }
	>Edit</button>
}

templ drawerExtraActions(urn folio.URN) {
	<a
		href="#"
		class="text-gray-700 block px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
		hx-on:click="document.getElementById('drawer-toggle').checked = false"
		hx-target="#notification"
		hx-delete={ "/object/" + urn.String() }
	>
		Delete { urn.Kind.String() }
	</a>
}

type ButtonDropdownProps struct {
	ID      string
	Primary templ.Component
	Options templ.Component
}

templ ButtonDropdown(props ButtonDropdownProps) {
	<div class="btn-dropdown inline-flex rounded-md shadow-sm relative">
		@props.Primary
		<!-- Hidden checkbox for the dropdown toggle -->
		<input type="checkbox" class="btn-dropdown-toggle hidden absolute" id={ props.ID + "-btn-dropdown-toggle" }/>
		<!-- Label acts as the button to toggle the dropdown -->
		<label for={ props.ID + "-btn-dropdown-toggle" } class="relative inline-flex items-center rounded-r-md bg-white px-2 py-2 text-gray-400 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-10 cursor-pointer">
			<span class="sr-only">Open options</span>
			<svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
				<path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z" clip-rule="evenodd"></path>
			</svg>
		</label>
		<!-- Dropdown menu, initially hidden -->
		<div class="btn-dropdown-menu absolute right-0 z-10 mt-11 w-48 origin-top-right rounded-md bg-white shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none transition-transform duration-200 transform opacity-0 scale-95 pointer-events-none">
			<div class="py-1">
				@props.Options
			</div>
		</div>
	</div>
}

type TextProps struct {
	Mode        render.Mode
	Name        string
	Label       string
	Placeholder string `default:"Please enter a value..."`
	Value       string
}

templ TextEdit(props TextProps) {
	<div class="px-4 py-6 sm:grid sm:grid-cols-4 sm:gap-2 sm:px-0">
		<dt class="leading-6">
			<p class="text-sm text-gray-900 font-semibold">{ props.Label }</p>
		</dt>
		<dd class="mt-1 text-sm leading-6 text-gray-700 sm:col-span-3 sm:mt-0">
			switch props.Mode {
				case render.ModeView :
					<p id={ props.Name }>{ props.Value }</p>
				case render.ModeEdit:
					<input
						type="text"
						id={ props.Name }
						name={ props.Name }
						class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
						placeholder={ props.Placeholder }
						value={ props.Value }
					/>
			}
		</dd>
	</div>
}

templ Divider(text string) {
	<div class="flex items-center">
		<div class="border-t border-1 border-gray-200 flex-grow"></div>
		<div class="px-3 text-gray-500 font-semibold text-sm">{ text }</div>
		<div class="border-t border-1 border-gray-200 flex-grow"></div>
	</div>
}

templ DrawerSection(title, subtitle string) {
	<div class="px-4 py-6 sm:px-0">
		<h3 class="text-base font-semibold leading-7 text-gray-900">
			<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-3 inline align-middle mb-1">
				<path stroke-linecap="round" stroke-linejoin="round" d="m5.25 4.5 7.5 7.5-7.5 7.5m6-15 7.5 7.5-7.5 7.5"></path>
			</svg>
			{ title }
		</h3>
		<p class="max-w-2xl text-xs leading-6 text-gray-500">
			{ subtitle }
		</p>
	</div>
}

templ Alert(title, subtitle string) {
	<div class="rounded-md bg-yellow-50 p-4">
		<div class="flex">
			<div class="flex-shrink-0">
				<svg class="h-5 w-5 text-yellow-400" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
					<path fill-rule="evenodd" d="M8.485 2.495c.673-1.167 2.357-1.167 3.03 0l6.28 10.875c.673 1.167-.17 2.625-1.516 2.625H3.72c-1.347 0-2.189-1.458-1.515-2.625L8.485 2.495zM10 5a.75.75 0 01.75.75v3.5a.75.75 0 01-1.5 0v-3.5A.75.75 0 0110 5zm0 9a1 1 0 100-2 1 1 0 000 2z" clip-rule="evenodd"></path>
				</svg>
			</div>
			<div class="ml-3">
				<h3 class="text-sm font-medium text-yellow-800">{ title }</h3>
				<div class="mt-2 text-sm text-yellow-700">
					<p>{ subtitle }.</p>
				</div>
			</div>
		</div>
	</div>
}

templ Notification(title, subtitle string) {
	<div id="notification" hx-swap-oob="true" aria-live="assertive" class="pointer-events-none fixed inset-0 flex items-end px-4 py-6 sm:items-start sm:p-6 z-10">
		<div class="flex w-full flex-col items-center space-y-4 sm:items-end">
			<!-- Notification panel -->
			<div class="pointer-events-auto w-full max-w-sm overflow-hidden rounded-lg bg-white shadow-lg ring-1 ring-black ring-opacity-5 notification-animation opacity-0 translate-y-2 sm:translate-x-2">
				<div class="p-4">
					<div class="flex items-start">
						<div class="flex-shrink-0">
							<svg class="h-6 w-6 text-green-400" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true">
								<path stroke-linecap="round" stroke-linejoin="round" d="M9 12.75L11.25 15 15 9.75M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
							</svg>
						</div>
						<div class="ml-3 w-0 flex-1 pt-0.5">
							<p class="text-sm font-medium text-gray-900">{ title }</p>
							<p class="mt-1 text-sm text-gray-500">{ subtitle }</p>
						</div>
						<div class="ml-4 flex flex-shrink-0">
							<button type="button" class="inline-flex rounded-md bg-white text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2">
								<span class="sr-only">Close</span>
								<svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
									<path d="M6.28 5.22a.75.75 0 00-1.06 1.06L8.94 10l-3.72 3.72a.75.75 0 101.06 1.06L10 11.06l3.72 3.72a.75.75 0 101.06-1.06L11.06 10l3.72-3.72a.75.75 0 00-1.06-1.06L10 8.94 6.28 5.22z"></path>
								</svg>
							</button>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
}
