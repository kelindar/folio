package blocks

import (
	"iter"

	"github.com/kelindar/folio"
	"github.com/kelindar/folio/example/docs"
	"github.com/kelindar/folio/example/render"
)

templ List(rctx *render.Context, items iter.Seq[*docs.Person]) {
	<div class="mx-auto max-w-screen-xl px-4 lg:px-12">
		<div class="bg-white dark:bg-gray-800 relative shadow-md sm:rounded-lg overflow-hidden">
			<div class="flex flex-col md:flex-row items-center justify-between space-y-3 md:space-y-0 md:space-x-4 p-4">
				<div class="w-full md:w-1/2">
					@SearchBar()
				</div>
				<div
					class="w-full md:w-auto flex flex-col md:flex-row space-y-2 md:space-y-0 items-stretch md:items-center justify-end md:space-x-3 flex-shrink-0"
				>
					<!-- actions -->
				</div>
			</div>
			<div class="overflow-x-auto">
				<h2 class="text-3xl font-extrabold leading-none tracking-tight text-gray-900 dark:text-white p-4">
					<span class="underline underline-offset-3 decoration-6 decoration-blue-400">Manage Users</span>
				</h2>
				@ListContent(rctx, items)
			</div>
			<nav
				class="flex flex-col md:flex-row justify-between items-start md:items-center space-y-3 md:space-y-0 p-4"
				aria-label="Table navigation"
			>
				<span class="text-sm font-normal text-gray-500 dark:text-gray-400">
					Showing
					<span class="font-semibold text-gray-900 dark:text-white">1-10</span>
					of
					<span class="font-semibold text-gray-900 dark:text-white">1000</span>
				</span>
				<ul class="inline-flex items-stretch -space-x-px">
					<li>
						<a
							href="#"
							class="flex items-center justify-center h-full py-1.5 px-3 ml-0 text-gray-500 bg-white rounded-l-lg border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white"
						>
							<span class="sr-only">Previous</span>
							<svg
								class="w-5 h-5"
								aria-hidden="true"
								fill="currentColor"
								viewbox="0 0 20 20"
								xmlns="http://www.w3.org/2000/svg"
							>
								<path
									fill-rule="evenodd"
									d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z"
									clip-rule="evenodd"
								></path>
							</svg>
						</a>
					</li>
					<li>
						<a
							href="#"
							class="flex items-center justify-center text-sm py-2 px-3 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white"
						>1</a>
					</li>
					<li>
						<a
							href="#"
							class="flex items-center justify-center text-sm py-2 px-3 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white"
						>2</a>
					</li>
					<li>
						<a
							href="#"
							aria-current="page"
							class="flex items-center justify-center text-sm z-10 py-2 px-3 leading-tight text-primary-600 bg-primary-50 border border-primary-300 hover:bg-primary-100 hover:text-primary-700 dark:border-gray-700 dark:bg-gray-700 dark:text-white"
						>3</a>
					</li>
					<li>
						<a
							href="#"
							class="flex items-center justify-center text-sm py-2 px-3 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white"
						>...</a>
					</li>
					<li>
						<a
							href="#"
							class="flex items-center justify-center text-sm py-2 px-3 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white"
						>100</a>
					</li>
					<li>
						<a
							href="#"
							class="flex items-center justify-center h-full py-1.5 px-3 leading-tight text-gray-500 bg-white rounded-r-lg border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white"
						>
							<span class="sr-only">Next</span>
							<svg
								class="w-5 h-5"
								aria-hidden="true"
								fill="currentColor"
								viewbox="0 0 20 20"
								xmlns="http://www.w3.org/2000/svg"
							>
								<path
									fill-rule="evenodd"
									d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z"
									clip-rule="evenodd"
								></path>
							</svg>
						</a>
					</li>
				</ul>
			</nav>
		</div>
	</div>
}

templ SearchBar() {
	<form hx-post={ "/search" } hx-target="#list-content" hx-swap="outerHTML" hx-ext="json-enc" class="flex items-center">
		<label for="simple-search" class="sr-only">Search</label>
		<div class="relative w-full">
			<div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
				<svg aria-hidden="true" class="w-5 h-5 text-gray-500 dark:text-gray-400" fill="currentColor" viewbox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
					<path
						fill-rule="evenodd"
						clip-rule="evenodd"
						d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z"
					></path>
				</svg>
			</div>
			<input
				type="text"
				id="query"
				name="query"
				class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full pl-10 p-2 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500"
				placeholder="Search"
			/>
		</div>
	</form>
}

templ ListContent(rctx *render.Context, elements iter.Seq[*docs.Person]) {
	<ul id="list-content" role="list" class="divide-y divide-gray-100" hx-on::after-settle="initFlowbite()">
		for v := range elements {
			<li
				class="flex justify-between gap-x-2 py-2 px-4 bg-white hover:bg-slate-100 hover:bg-opacity-50 hover:text-white transition duration-300"
				hx-on:click="document.getElementById('drawer-toggle').checked = true"
				hx-target="#drawer"
				hx-get={ "/view/" + v.URN().String() }
			>
				<div id={ v.URN().ID } class="w-full contents">
					@ListElementRow(v)
				</div>
			</li>
		}
	</ul>
}

templ ListElementUpdate(rctx *render.Context, v *docs.Person) {
	<div id={ v.URN().ID } hx-swap-oob="true" class="w-full contents">
		@ListElementRow(v)
	</div>
	@ListElementEdit(rctx, v)
}

templ ListElementRow(v folio.Object) {
	<div class="flex min-w-0 gap-x-4">
		if render.StringOf(v, "Icon") != "" {
			<img class="h-12 w-12 flex-none rounded-full bg-gray-50" src={ render.StringOf(v, "Icon") } alt=""/>
		}
		<div class="min-w-0 flex-auto ">
			<p class="text-sm font-semibold leading-6 text-gray-900 whitespace-nowrap truncate">
				{ render.StringOf(v, "Title") }
				for _, tag := range render.ListOf(v, "Badges") {
					<span class="bg-slate-100 text-slate-800 text-xxs font-medium me-1 px-2.5 py-0.5 rounded dark:bg-slate-700 dark:text-slate-300">
						{ tag }
					</span>
				}
			</p>
			<p class="mt-1 truncate text-xs leading-5 text-gray-500">{ render.StringOf(v, "Subtitle") }</p>
		</div>
	</div>
	<div class="hidden shrink-0 sm:flex sm:flex-col sm:items-end gap-y-0.5">
		@State(render.StringOf(v, "Status"))
		<span class="mt-1 truncate text-xs leading-5 text-gray-500 px-2">{ updatedOf(v) }</span>
	</div>
}

templ State(value string) {
	<span class={ "bg-" + colorOf(value) + "-100 text-" + colorOf(value) + "-800 text-sm font-medium me-2 px-2 py-0.5 rounded" }>{ value }</span>
}
